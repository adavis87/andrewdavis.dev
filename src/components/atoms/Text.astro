---
import type {HTMLAttributes} from 'astro/types';

type FontWeight = 'normal' | 'bold' | '900';
type TextElement = 'p' | 'span' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';

const default_weight = 'normal';

function getFontWeight(bold?: boolean, weight?: FontWeight) {
  if (typeof weight === 'undefined') {
    return bold ? 'bold' : default_weight;
  } else {
    return weight;
  }
}

interface Props extends HTMLAttributes<'p'> {
  readonly as?: TextElement;
  readonly weight?: FontWeight;
  readonly bold?: boolean;
  readonly color?: string;
  readonly class?: string;
  readonly light?: boolean;
  readonly monospace?: boolean;
  readonly truncate?: boolean;
  readonly hovercolor?: string;
  readonly flex?: number | string | boolean;
  readonly align?: 'left' | 'center' | 'right';
}

const {as: Element = 'p', hovercolor, class: className, ...rest} = Astro.props;

const inlineStyles = {
  textAlign: rest.align,
  fontWeight: getFontWeight(rest.bold, rest.weight),
  color: rest.color,
  flex: rest.flex ? 1 : rest.flex === false ? 0 : rest.flex,
};
---

<Element
  class:list={[
    'text',
    {
      light: rest.light,
      monospace: rest.monospace,
      truncate: rest.truncate,
    },
    className,
  ]}
  style={inlineStyles}
  {...rest}
>
  <slot />
</Element>

<style define:vars={{hovercolor}}>
  .text {
    color: var(--black-0);
  }
  .text:hover {
    color: var(--hoverColor);
  }

  .text-light {
    color: var(--black-1);
  }
  .text-light:hover {
    color: var(--black-1);
  }

  .monospace {
    font-family: ui-monospace, Menlo, Monaco, Consolas, 'Courier New', monospace;
  }

  .truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    max-width: 100%;
  }
</style>
